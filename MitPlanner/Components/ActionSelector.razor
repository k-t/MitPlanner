@using AntDesign
@using MitPlanner.Model
@using MitPlanner.Services
@using MitPlanner.Utilities

@inject ActionTimelineService ActionTimelineService
@inject JobActionService JobActionService

<div class="action-selector">
    <div class="tl-title">@Actor?.JobTitle</div>
    <div class="action-tag-container">
        @foreach (var action in actions) {
            <ActionTag Action="@action"
                State="GetActionState(action)"
                Click="HandleActionClick"
                DragStart="HandleActionDragStart"
                DragEnd="HandleActionDragEnd" />
        }
    </div>
</div>

@code
{
    [CascadingParameter]
    protected DragContext? DragContext { get; set; }

    [Parameter]
    public ActorModel? Actor { get; set; }

    [Parameter]
    public TimetableModel? Timeline { get; set; }

    [Parameter]
    public TimetableItemModel? TimelineItem { get; set; }

    [Parameter]
    public EventCallback<ActorAction> ActionClick { get; set; }

    private IReadOnlyCollection<ActionModel> actions = Array.Empty<ActionModel>();

    protected override void OnParametersSet()
    {
        if (Actor != null)
        {
            actions = JobActionService.GetAllActions(Actor.JobId);
        }
        else
        {
            actions = Array.Empty<ActionModel>();
        }
    }

    private ActionSelectionState GetActionState(ActionModel action)
    {
        if (TimelineItem == null || Actor == null)
            return ActionSelectionState.Default;

        var actions = TimelineItem.GetActions(Actor.ActorId);
        if (actions == null)
            return ActionSelectionState.Default;

        if (actions.Any(a => a.Name == action.Name))
            return ActionSelectionState.Selected;

        // TODO: fix this mess
        if (Timeline != null)
        {
            TimetableItemModel? lastActionUsage = null;

            foreach (var item in Timeline.Items)
            {
                if (item.Actions.Any(a => a.Key == Actor.ActorId && a.Value.Any(x => x.Name == action.Name)))
                {
                    lastActionUsage = item;
                }

                if (item == TimelineItem)
                    break;
            }

            if (lastActionUsage != null)
            {
                var lastTime = lastActionUsage.Timeline.End ?? lastActionUsage.Timeline.Start;
                var time = TimelineItem.Timeline.End ?? TimelineItem.Timeline.Start;

                if (time.HasValue && lastTime.HasValue)
                {
                    if (lastTime.Value.Add(action.Recast) > time)
                        return ActionSelectionState.Unavailable;
                }
            }
        }

        return ActionSelectionState.Default;
    }

    private async Task HandleActionClick(ActionModel action)
    {
        if (Actor == null)
            return;

        await ActionClick.InvokeAsync(new ActorAction(Actor.ActorId, action));
    }

    private void HandleActionDragStart(ActionModel action)
    {
        if (DragContext == null || Actor == null)
            return;

        DragContext.Data = new ActorAction(Actor.ActorId, action);
    }

    private void HandleActionDragEnd()
    {
        if (DragContext == null)
            return;

        DragContext.Data = null;
    }
}
