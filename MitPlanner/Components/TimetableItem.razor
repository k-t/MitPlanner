@using AntDesign
@using MitPlanner.Data.Model
@using MitPlanner.Model
@using MitPlanner.Services;
@using MitPlanner.Utilities;

@if (Model != null)
{
    <div class="tl-item @(IsSelected ? "tl-selected" : "")" @ondrop="HandleDrop" @onclick="HandleClick">
        <div class="tl-time-col">
            <span>@FormatTimeSpan(Model.Timeline.Start)</span>
            <span>@FormatTimeSpan(Model.Timeline.End)</span>
        </div>
        <div class="tl-name-col">
            <div class="tl-title">
                @Model.Timeline.Name
            </div>
            @if (Model.Timeline.Type == TimelineNodeType.Raidwide)
            {
                <Tag class="tl-tag" Color="error">Raidwide</Tag>
            }
            @if (Model.Timeline.Type == TimelineNodeType.Tankbuster)
            {
                <Tag class="tl-tag" Color="warning">TB</Tag>
            }
            <Tag class="tl-tag" Color="@GetDamageTypeColor(Model.Timeline.DamageType)">@Model.Timeline.DamageType</Tag>
            <Tag class="tl-tag" Color="default">@Model.Timeline.Actor</Tag>
        </div>
        @foreach (var item in Model.Actions)
        {
            <div class="tl-action-col">
                <ActionList Actions="@item.Value" ActionClick="action => HandleActionClick(item.Key, action)" />
            </div>
        }
    </div>
}

@code
{
    [CascadingParameter]
    protected DragContext? DragContext { get; set; }

    [Parameter]
    public bool IsSelected { get; set; }

    [Parameter]
    [EditorRequired]
    public TimetableItemModel? Model { get; set; }

    [Parameter]
    public EventCallback Click { get; set; }

    [Parameter]
    public EventCallback<ActorAction> ActionClick { get; set; }

    [Parameter]
    public EventCallback<ActorAction> ActionDrop { get; set; }

    string TitleType => Model?.Timeline.Type switch
    {
        TimelineNodeType.Raidwide => "danger",
        TimelineNodeType.Tankbuster => "warning",
        _ => ""
    };

    string TitleTooltip => Model?.Timeline.Type switch
    {
        TimelineNodeType.Raidwide => "Raidwide AoE",
        TimelineNodeType.Tankbuster => "Tank Buster",
        _ => ""
    };

    protected override void OnInitialized()
    {
        if (Model != null)
            Model.ActionListChanged += (_, _) => InvokeAsync(StateHasChanged);
    }

    string FormatTimeSpan(TimeSpan? value)
    {
        return (value != null)
            ? value.Value.ToString(@"m\:ss")
            : " ";
    }

    string GetDamageTypeColor(string? damageType)
    {
        return damageType switch
        {
            "Magic" => "processing",
            "Physical" => "success",
            _ => "default"
        };
    }

    private async Task HandleClick()
    {
        await Click.InvokeAsync();
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        if (DragContext?.Data == null)
            return;

        await ActionDrop.InvokeAsync(DragContext.Data);
    }

    private async Task HandleActionClick(int actorId, ActionModel action)
    {
        await ActionClick.InvokeAsync(new ActorAction(actorId, action));
    }
}
